public static Node mulLLwithDigit(Node l1,int digit) {
      Node n1=l1;
      Node result=null;
      int carry=0;
      while(n1!=null || carry!=0) {
         int data=carry+digit*(n1!=null?n1.val:0);
         result=insertAtEnd(data%10,result);
         carry=data/10;
         n1=n1!=null?n1.next:n1;
      }
      return result;
}
   
public static void addLL(Node l1,Node l2) { //different way of adding LL acc to ques
      Node n1=l1;
      Node n2=l2;
      int carry=0;
      while(n2!=null || carry!=0){
          int data=(n1.next!=null?n1.next.val:0)+(n2!=null ? n2.val:0)+carry;
          if(n1.next==null) {
             n1.next=new Node(data%10);
          }
          else {
             n1.next.val=data%10;
          }
          carry=data/10;
          n1=n1.next;
          n2=n2!=null?n2.next:n2;
      }
}
   
public static Node mul2LL(Node l1,Node l2) {     
      Node n1=reverseLL(l1);
      Node n2=reverseLL(l2);
      Node result=null;
      Node ptr=result;
      while(n2!=null) {
         Node nnode=mulLLwithDigit(n1,n2.val);
         if(result==null) {
            result=nnode;
            ptr=result;
         }
         else {
            addLL(ptr,nnode);
            ptr=ptr.next;
         }
         n2=n2.next;
      }
      return reverseLL(result);
}
