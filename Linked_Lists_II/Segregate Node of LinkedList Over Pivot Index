// return starting node of LL
// pivot node can be any random index in the range 0 to Length of link list 
// After segregation the pivot element should be present at the correct position as in a sorted linked list 
public static Node segregateNodeofLinkedListOverPivotIndex(Node head, int index) {                          
      if(head==null || head.next==null || index<0 || index>=getSize(head)) {return head;}
      Node pivot=head;
      while(index-->0) {
         pivot=pivot.next;
      }                          
      Node s=new Node(-1);
      Node st=s;
      Node l=new Node(-1);
      Node lt=l;
      Node curr=head;
      while(curr!=null) {
         if(curr==pivot) {
            curr=curr.next;
            continue;
         }
         if(curr.val<=pivot.val) {
            st.next=curr;
            st=st.next;
         }
         else {
            lt.next=curr;
            lt=lt.next;
         }
         curr=curr.next;
      }
      lt.next=null;
      st.next=pivot;
      pivot.next=l.next;
      return s.next;      
}
