Method 1: Uisng Divide and conquer approach

class Solution {
    public static ListNode mergeSort2LL(ListNode head1,ListNode head2){
        if(head1==null){return head2;}
        if(head2==null){return head1;}
        if(head1.val<=head2.val){
            head1.next=mergeSort2LL(head1.next,head2);
            return head1;
        }
        else{
            head2.next=mergeSort2LL(head1,head2.next);
            return head2;
        }
    }
    public ListNode mergeKLists(ListNode[] lists, int l,int h) {
        if(l==h){return lists[l];}
        int mid=l+(h-l)/2;
        ListNode head1=mergeKLists(lists,l,mid);
        ListNode head2=mergeKLists(lists,mid+1,h);
        return mergeSort2LL(head1,head2);
    }
    public ListNode mergeKLists(ListNode[] lists) {
        int k=lists.length;
        if(k==0){return null;}
        if(k==1){return lists[0];}
        return mergeKLists(lists,0,k-1);
    }
}

Method 2: Using Priority Queue

import java.util.*;
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        PriorityQueue<ListNode> pq=new PriorityQueue<>((a,b)->{
            return a.val-b.val;
        });
        for(ListNode l:lists){
            if(l!=null){
                pq.add(l);
            }
        }
        ListNode dummy=new ListNode(-1); //dummy node
        ListNode prev=dummy; //tail
        while(!pq.isEmpty()){
            ListNode n=pq.remove();
            prev.next=n;
            prev=prev.next;
            n=n.next;
            if(n!=null){pq.add(n);}
        }
        return dummy.next;
    }
}
